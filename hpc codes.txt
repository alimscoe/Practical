BFS DFS

#include <iostream>
#include<vector>
#include<omp.h>
#include<queue>


using namespace std;


struct  Node{
    int id;
    vector<int> neighbors;
    bool visited;
};

void parallelBFS(vector<Node>& graph, int source){
    
    int numNodes = graph.size();
    
    queue<int>  bfsQueue;
    
    graph[source].visited = true;
    bfsQueue.push(source);
    
    #pragma omp parallel
    {
        while(!bfsQueue.empty()){
            int current = bfsQueue.front();
            bfsQueue.pop();
            
            #pragma omp for 
            for (int i =0; i<graph[current].neighbors.size(); ++i){
                int neighborID= graph[current].neighbors[i];
                
                if (!graph[neighborID].visited){
                    
                    #pragma omp critical
                    {
                        graph[neighborID].visited = true;
                        bfsQueue.push(neighborID);
                    }
                }
            }
        }
    }
    
}


void addUndirEdge(vector<Node>& graph, int src, int dest){
    graph[src].neighbors.push_back(dest);
    graph[src].neighbors.push_back(src);
}


int main() {

    vector<Node> graph(8);
    
    addUndirEdge(graph, 0,1);
    addUndirEdge(graph, 0,2);
    addUndirEdge(graph, 1,3);
    addUndirEdge(graph, 1,4);
    addUndirEdge(graph, 2,5);
    addUndirEdge(graph, 2,6);
    addUndirEdge(graph, 4,7);
    
    parallelBFS(graph, 0);
    
    for (int i = 0 ; i<graph.size();++i){
        if (graph[i].visited){
            cout<< i<<" ";
        }
    }
    
    return 0;
}


Bubble Sort


#include <iostream>
#include<vector>
#include<omp.h>


using namespace std;


void parrBubbSort(vector<int>& arr){
    int n = arr.size();
    bool swapped;
    
    for (int  i =0; i< n-1; ++i ){
        swapped = false;
        
        #pragma omp parallel for shared(arr, swapped)
        for (int j = 0 ;j<n-i -1; ++j){
            if (arr[j]> arr[j+1]){
                swap(arr[j], arr[j+1]);
                swapped = true;
                
            }
        }
        if (!swapped)
            break;
    }
}

int main(){
    
    vector<int> arr = {21,5,5,8,6,7,1};
    
    parrBubbSort(arr);
    
    for(int num : arr){
        cout<<num<<" ";
    }
    return 0;
}.


Merge Sort

#include <iostream>
#include<vector>
#include<omp.h>


using namespace std;

void merge(vector<int>& arr, int left, int mid, int right){
    int n1=  mid - left + 1;
    int n2 = right - mid;
    
    vector<int> L(n1), R(n2);
    
    for (int i =0; i< n1; ++i)
        L[i] = arr[left + i];
        
    for (int j = 0; j<n2;++j)
        R[j] = arr[mid+1+j];
        
    int i =0, j=0, k=left;
    
    while(i<n1 && j<n2){
        if (L[i]<=R[j]){
            arr[k] = L[i];
            ++i;
        }else{
            arr[k] =  R[j];
            ++j;
        }
        ++k;
    }
    
    while(i<n1){
        arr[k]= L[i];
        ++i;
        ++k;
    }
    
    while(j<n2){
        arr[k]= R[j];
        ++j;
        ++k;
    }
     
}

void parrMergeSort(vector<int> &arr,int left ,int right){
    
    if (left<right){
        int mid =  left +(right- left)/2;
        
        #pragma omp parallel sections
        {
            #pragma omp section
            {
                parrMergeSort(arr, left,mid);
            }
            #pragma omp section
            {
                parrMergeSort(arr, mid+1, right);
            }
        }
        
        merge(arr, left,mid,right);
    }
}

int main(){   
    
    vector<int> arr = {9, 3, 2, 6, 4, 5, 1, 8, 7};
    
    parrMergeSort(arr, 0, arr.size()-1);
    
    for (int num: arr){
        cout<<num<< " ";
    }
    
    return 0;
}

Min,Max,Sum, Avg

#include <iostream>
#include<vector>
#include<omp.h>


using namespace std;

int parMin(vector<int>& arr){
    int min = arr[0];
     #pragma omp parallel for reduction(min: min)
     for (int i =0; i< arr.size(); ++i){
         if(arr[i]<min){
             min = arr[i];
         }
     }
     return min;
}

int parMax(vector<int>& arr){
    int max = arr[0];
     #pragma omp parallel for reduction(max: max)
     for (int i =0; i< arr.size(); ++i){
         if(arr[i]>max){
             max = arr[i];
         }
     }
     return max;
}
int parsum(vector<int>& arr){
    int sum = 0;
    
    #pragma omp parallel for reduction (+: sum)
    for(int i =0; i<arr.size(); ++i){
        sum+=arr[i];
        
    }
    return sum;
}

int avg(vector<int>& arr){
    int sum = parsum(arr);
    
    int avg = sum/arr.size();
    
    
    return avg;
}

int main(){
    vector<int> arr = {56,6,8,94,55,8,5,2, };
    cout<<parMin(arr)<<'\n';
    cout<<parMax(arr)<<'\n';
    cout<<parsum(arr)<<'\n';
    cout<<avg(arr)<<'\n';
}



